CONSTTK const
INTTK int
IDENFR const_int_1
ASSIGN =
INTCON 12345679
COMMA ,
IDENFR const_int_2
ASSIGN =
INTCON 0
SEMICN ;
CONSTTK const
INTTK int
IDENFR const_int_3
ASSIGN =
MINU -
INTCON 0
COMMA ,
IDENFR const_int_4
ASSIGN =
MINU -
INTCON 12345679
SEMICN ;
CONSTTK const
CHARTK char
IDENFR const_char_1
ASSIGN =
CHARCON 9
COMMA ,
IDENFR const_char_2
ASSIGN =
CHARCON _
COMMA ,
IDENFR const_char_3
ASSIGN =
CHARCON +
COMMA ,
IDENFR const_char_4
ASSIGN =
CHARCON *
SEMICN ;
INTTK int
IDENFR global_int_array_1
LBRACK [
INTCON 5
RBRACK ]
COMMA ,
IDENFR global_int_1
SEMICN ;
CHARTK char
IDENFR global_char_array_1
LBRACK [
INTCON 5
RBRACK ]
COMMA ,
IDENFR global_char_1
SEMICN ;
INTTK int
IDENFR global_int_2
COMMA ,
IDENFR global_int_array_2
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
CHARTK char
IDENFR global_char_2
COMMA ,
IDENFR global_char_array_2
LBRACK [
INTCON 5
RBRACK ]
COMMA ,
IDENFR global_char_array_3
LBRACK [
INTCON 10
RBRACK ]
SEMICN ;
VOIDTK void
IDENFR hanoi
LPARENT (
INTTK int
IDENFR n
COMMA ,
CHARTK char
IDENFR from
COMMA ,
CHARTK char
IDENFR tmp
COMMA ,
CHARTK char
IDENFR to
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR n
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR hanoi
LPARENT (
IDENFR n
MINU -
INTCON 1
COMMA ,
IDENFR from
COMMA ,
IDENFR to
COMMA ,
IDENFR tmp
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON take
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR n
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON from
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR from
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON to
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR to
RPARENT )
SEMICN ;
IDENFR hanoi
LPARENT (
IDENFR n
MINU -
INTCON 1
COMMA ,
IDENFR tmp
COMMA ,
IDENFR from
COMMA ,
IDENFR to
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR Fibonacci
LPARENT (
INTTK int
IDENFR n
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR n
EQL ==
INTCON 0
RPARENT )
RETURNTK return
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR n
EQL ==
INTCON 1
RPARENT )
RETURNTK return
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
RETURNTK return
LPARENT (
IDENFR Fibonacci
LPARENT (
IDENFR n
MINU -
INTCON 1
RPARENT )
PLUS +
IDENFR Fibonacci
LPARENT (
IDENFR n
MINU -
INTCON 2
RPARENT )
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR fac
LPARENT (
INTTK int
IDENFR n
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR n
EQL ==
INTCON 1
RPARENT )
RETURNTK return
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
RETURNTK return
LPARENT (
IDENFR n
MULT *
IDENFR fac
LPARENT (
IDENFR n
MINU -
INTCON 1
RPARENT )
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR initGlobalArray
LPARENT (
RPARENT )
LBRACE {
IDENFR global_int_array_1
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 0
SEMICN ;
IDENFR global_int_array_1
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IDENFR global_int_array_1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
IDENFR global_int_array_1
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR global_int_array_1
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
IDENFR global_int_array_1
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
IDENFR global_int_array_1
LBRACK [
INTCON 2
RBRACK ]
PLUS +
IDENFR global_int_array_1
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
IDENFR global_int_array_1
LBRACK [
INTCON 4
RBRACK ]
ASSIGN =
IDENFR global_int_array_1
LBRACK [
INTCON 3
RBRACK ]
PLUS +
IDENFR global_int_array_1
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
IDENFR global_int_array_2
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR global_int_array_1
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
IDENFR global_int_array_2
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR global_int_array_2
LBRACK [
INTCON 0
RBRACK ]
MULT *
IDENFR global_int_array_1
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
IDENFR global_int_array_2
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
IDENFR global_int_array_2
LBRACK [
INTCON 1
RBRACK ]
MULT *
IDENFR global_int_array_1
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
IDENFR global_int_array_2
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
IDENFR global_int_array_2
LBRACK [
INTCON 2
RBRACK ]
MULT *
IDENFR global_int_array_1
LBRACK [
INTCON 4
RBRACK ]
SEMICN ;
IDENFR global_int_array_2
LBRACK [
INTCON 4
RBRACK ]
ASSIGN =
IDENFR global_int_array_2
LBRACK [
INTCON 3
RBRACK ]
DIV /
IDENFR global_int_array_1
LBRACK [
INTCON 4
RBRACK ]
SEMICN ;
IDENFR global_char_array_1
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
CHARCON a
SEMICN ;
IDENFR global_char_array_1
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
CHARCON A
SEMICN ;
IDENFR global_char_array_1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
CHARCON z
SEMICN ;
IDENFR global_char_array_1
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
CHARCON Z
SEMICN ;
IDENFR global_char_array_1
LBRACK [
INTCON 4
RBRACK ]
ASSIGN =
CHARCON _
SEMICN ;
IDENFR global_char_array_2
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
CHARCON +
SEMICN ;
IDENFR global_char_array_2
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
CHARCON -
SEMICN ;
IDENFR global_char_array_2
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
CHARCON *
SEMICN ;
IDENFR global_char_array_2
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
CHARCON /
SEMICN ;
IDENFR global_char_array_2
LBRACK [
INTCON 4
RBRACK ]
ASSIGN =
CHARCON 6
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR assignGlobal
LPARENT (
INTTK int
IDENFR a
COMMA ,
CHARTK char
IDENFR b
COMMA ,
INTTK int
IDENFR c
COMMA ,
CHARTK char
IDENFR d
RPARENT )
LBRACE {
IDENFR global_int_1
ASSIGN =
IDENFR a
SEMICN ;
IDENFR global_char_1
ASSIGN =
IDENFR b
SEMICN ;
IDENFR global_int_2
ASSIGN =
IDENFR c
SEMICN ;
IDENFR global_char_2
ASSIGN =
IDENFR d
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR printGlobalConst
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
IDENFR const_int_1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR const_int_2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR const_int_3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR const_int_4
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR const_char_1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR const_char_2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR const_char_3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR const_char_4
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR printGlobalVar
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
IDENFR global_int_1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR global_int_2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR global_char_1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR global_char_2
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR printGlobalArray
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
IDENFR global_int_array_1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR global_int_array_1
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR global_int_array_1
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR global_int_array_1
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR global_int_array_1
LBRACK [
INTCON 4
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR global_int_array_2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR global_int_array_2
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR global_int_array_2
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR global_int_array_2
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR global_int_array_2
LBRACK [
INTCON 4
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR global_char_array_1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR global_char_array_1
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR global_char_array_1
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR global_char_array_1
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR global_char_array_1
LBRACK [
INTCON 4
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR global_char_array_2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR global_char_array_2
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR global_char_array_2
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR global_char_array_2
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR global_char_array_2
LBRACK [
INTCON 4
RBRACK ]
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR testGlobal
LPARENT (
RPARENT )
LBRACE {
IDENFR initGlobalArray
LPARENT (
RPARENT )
SEMICN ;
IDENFR assignGlobal
LPARENT (
IDENFR const_int_1
COMMA ,
IDENFR const_char_1
COMMA ,
IDENFR const_int_4
COMMA ,
IDENFR const_char_4
RPARENT )
SEMICN ;
IDENFR printGlobalConst
LPARENT (
RPARENT )
SEMICN ;
IDENFR printGlobalVar
LPARENT (
RPARENT )
SEMICN ;
IDENFR printGlobalArray
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR testReturnInt
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
IDENFR a
PLUS +
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
CHARTK char
IDENFR testReturnChar
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 1
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
CHARCON a
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 2
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
CHARCON b
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 3
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
CHARCON c
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
LPARENT (
CHARCON _
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR testReturn
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
IDENFR testReturnInt
LPARENT (
IDENFR Fibonacci
LPARENT (
IDENFR fac
LPARENT (
INTCON 3
RPARENT )
PLUS +
IDENFR fac
LPARENT (
INTCON 2
RPARENT )
RPARENT )
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR testReturnChar
LPARENT (
INTCON 1
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR testReturnChar
LPARENT (
INTCON 2
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR testReturnChar
LPARENT (
INTCON 3
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR testReturnChar
LPARENT (
INTCON 4
RPARENT )
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR testAssignAndExp
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR const_int_1
ASSIGN =
INTCON 1
COMMA ,
IDENFR const_int_2
ASSIGN =
MINU -
INTCON 1
COMMA ,
IDENFR const_int_3
ASSIGN =
INTCON 0
SEMICN ;
CONSTTK const
CHARTK char
IDENFR const_char_1
ASSIGN =
CHARCON a
COMMA ,
IDENFR const_char_2
ASSIGN =
CHARCON A
COMMA ,
IDENFR const_char_3
ASSIGN =
CHARCON b
SEMICN ;
INTTK int
IDENFR int_temp_1
COMMA ,
IDENFR int_temp_2
COMMA ,
IDENFR int_array
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
IDENFR int_temp_3
SEMICN ;
CHARTK char
IDENFR char_temp_1
COMMA ,
IDENFR char_array
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
IDENFR char_temp_2
SEMICN ;
IDENFR int_temp_1
ASSIGN =
IDENFR const_int_1
PLUS +
LPARENT (
IDENFR Fibonacci
LPARENT (
IDENFR Fibonacci
LPARENT (
IDENFR Fibonacci
LPARENT (
INTCON 5
RPARENT )
RPARENT )
RPARENT )
PLUS +
IDENFR const_int_1
DIV /
LPARENT (
IDENFR const_int_2
MULT *
IDENFR const_int_4
RPARENT )
RPARENT )
DIV /
IDENFR fac
LPARENT (
INTCON 3
RPARENT )
SEMICN ;
IDENFR int_temp_2
ASSIGN =
IDENFR fac
LPARENT (
IDENFR fac
LPARENT (
INTCON 3
RPARENT )
PLUS +
IDENFR fac
LPARENT (
INTCON 2
RPARENT )
RPARENT )
SEMICN ;
IDENFR int_array
LBRACK [
IDENFR const_int_3
RBRACK ]
ASSIGN =
IDENFR testReturnInt
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IDENFR int_array
LBRACK [
IDENFR const_int_1
MINU -
LPARENT (
IDENFR const_int_2
MULT *
IDENFR const_int_4
PLUS +
IDENFR testReturnInt
LPARENT (
INTCON 0
RPARENT )
MULT *
IDENFR const_int_4
RPARENT )
RBRACK ]
ASSIGN =
IDENFR const_int_1
PLUS +
IDENFR testReturnInt
LPARENT (
IDENFR const_int_1
RPARENT )
SEMICN ;
IDENFR int_temp_3
ASSIGN =
IDENFR int_array
LBRACK [
IDENFR const_int_3
RBRACK ]
MINU -
LPARENT (
IDENFR int_array
LBRACK [
IDENFR const_int_1
MINU -
LPARENT (
IDENFR const_int_2
MULT *
IDENFR const_int_4
PLUS +
IDENFR testReturnInt
LPARENT (
INTCON 0
RPARENT )
MULT *
IDENFR const_int_4
RPARENT )
RBRACK ]
MULT *
LPARENT (
CHARCON b
MINU -
CHARCON a
RPARENT )
RPARENT )
SEMICN ;
IDENFR char_array
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR testReturnChar
LPARENT (
IDENFR int_array
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR char_array
LBRACK [
IDENFR const_int_1
MINU -
LPARENT (
IDENFR const_int_2
MULT *
IDENFR const_int_4
PLUS +
IDENFR testReturnInt
LPARENT (
INTCON 0
RPARENT )
MULT *
IDENFR const_int_4
RPARENT )
RBRACK ]
ASSIGN =
IDENFR testReturnChar
LPARENT (
IDENFR int_array
LBRACK [
INTCON 1
RBRACK ]
PLUS +
IDENFR const_int_1
RPARENT )
SEMICN ;
IDENFR char_temp_1
ASSIGN =
IDENFR char_array
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR char_temp_2
ASSIGN =
IDENFR char_array
LBRACK [
IDENFR const_int_1
MINU -
LPARENT (
IDENFR const_int_2
MULT *
IDENFR const_int_4
PLUS +
IDENFR testReturnInt
LPARENT (
INTCON 0
RPARENT )
MULT *
IDENFR const_int_4
RPARENT )
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR int_temp_1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR int_temp_2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR int_temp_3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR int_array
LBRACK [
IDENFR const_int_3
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR int_array
LBRACK [
IDENFR const_int_1
MINU -
LPARENT (
IDENFR const_int_2
MULT *
IDENFR const_int_4
PLUS +
IDENFR testReturnInt
LPARENT (
INTCON 0
RPARENT )
MULT *
IDENFR const_int_4
RPARENT )
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR char_temp_1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR char_temp_2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR char_array
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR char_array
LBRACK [
IDENFR const_int_1
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR char_temp_1
MULT *
LPARENT (
IDENFR char_array
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR char_array
LBRACK [
INTCON 0
RBRACK ]
MULT *
IDENFR char_temp_2
RPARENT )
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR testIO
LPARENT (
RPARENT )
LBRACE {
SCANFTK scanf
LPARENT (
IDENFR global_int_1
RPARENT )
SEMICN ;
SCANFTK scanf
LPARENT (
IDENFR global_char_1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON !@\\n#$^&*()Qqaa123[];',./
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR global_int_1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR global_char_1
RPARENT )
SEMICN ;
SCANFTK scanf
LPARENT (
IDENFR global_int_1
COMMA ,
IDENFR global_char_1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON !@\\n#$^&*()Qqaa123[];',./
COMMA ,
IDENFR global_int_1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR global_char_1
RPARENT )
SEMICN ;
SCANFTK scanf
LPARENT (
IDENFR global_char_1
COMMA ,
IDENFR global_int_1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON !@\\n#$^&*()Qqaa123[];',./
COMMA ,
IDENFR global_char_1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR global_int_1
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR testIfWhile
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
COMMA ,
IDENFR j
COMMA ,
IDENFR k
SEMICN ;
CHARTK char
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
COMMA ,
IDENFR d
SEMICN ;
IDENFR k
ASSIGN =
INTCON 10
SEMICN ;
IDENFR a
ASSIGN =
CHARCON +
SEMICN ;
IDENFR b
ASSIGN =
CHARCON -
SEMICN ;
IDENFR c
ASSIGN =
CHARCON *
SEMICN ;
IDENFR d
ASSIGN =
CHARCON /
SEMICN ;
IFTK if
LPARENT (
IDENFR k
GRE >
INTCON 0
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR k
LEQ <=
INTCON 10
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR k
DIV /
INTCON 2
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
MINU -
LPARENT (
IDENFR i
DIV /
INTCON 2
MULT *
INTCON 2
RPARENT )
EQL ==
INTCON 0
RPARENT )
LBRACE {
IDENFR global_char_array_3
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR a
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR i
MINU -
LPARENT (
IDENFR i
DIV /
INTCON 2
MULT *
INTCON 2
RPARENT )
EQL ==
INTCON 1
RPARENT )
LBRACE {
IDENFR global_char_array_3
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR b
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
IDENFR global_char_array_3
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR k
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
MINU -
LPARENT (
IDENFR i
DIV /
INTCON 2
MULT *
INTCON 2
RPARENT )
EQL ==
INTCON 0
RPARENT )
LBRACE {
IDENFR global_char_array_3
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR c
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR global_char_array_3
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR d
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
IDENFR global_char_array_3
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR testSwitch
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR sum
ASSIGN =
INTCON 3
SEMICN ;
INTTK int
IDENFR int_1
COMMA ,
IDENFR i
SEMICN ;
CHARTK char
IDENFR char_1
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR int_1
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR sum
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR int_1
EQL ==
INTCON 0
RPARENT )
LBRACE {
IDENFR char_1
ASSIGN =
CHARCON a
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR char_1
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR int_1
EQL ==
INTCON 1
RPARENT )
LBRACE {
IDENFR char_1
ASSIGN =
CHARCON b
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR char_1
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR char_1
ASSIGN =
IDENFR const_char_2
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR char_1
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
LPARENT (
IDENFR char_1
RPARENT )
EQL ==
LPARENT (
CHARCON a
RPARENT )
RPARENT )
LBRACE {
IDENFR int_1
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR int_1
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
LPARENT (
IDENFR char_1
RPARENT )
EQL ==
LPARENT (
CHARCON b
RPARENT )
RPARENT )
LBRACE {
IDENFR int_1
ASSIGN =
IDENFR sum
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR int_1
RPARENT )
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR func_ret_int_1
LPARENT (
INTTK int
IDENFR i_1
COMMA ,
INTTK int
IDENFR i_2
COMMA ,
CHARTK char
IDENFR c_1
COMMA ,
CHARTK char
IDENFR c_2
RPARENT )
LBRACE {
INTTK int
IDENFR i_temp
SEMICN ;
CHARTK char
IDENFR c_temp
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON INPUT of func_ret_int_1:
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR i_1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR i_2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR c_1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR c_2
RPARENT )
SEMICN ;
IDENFR i_temp
ASSIGN =
IDENFR i_1
SEMICN ;
IDENFR i_1
ASSIGN =
IDENFR i_2
SEMICN ;
IDENFR i_2
ASSIGN =
IDENFR i_temp
SEMICN ;
IDENFR c_temp
ASSIGN =
IDENFR c_1
SEMICN ;
IDENFR c_1
ASSIGN =
IDENFR c_2
SEMICN ;
IDENFR c_2
ASSIGN =
IDENFR c_temp
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON OPERATE of func_ret_int_1:
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR i_1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR i_2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR c_1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR c_2
RPARENT )
SEMICN ;
RETURNTK return
LPARENT (
IDENFR i_1
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR testPara
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
COMMA ,
IDENFR j
SEMICN ;
CHARTK char
IDENFR c
COMMA ,
IDENFR d
SEMICN ;
IDENFR i
ASSIGN =
IDENFR const_int_1
SEMICN ;
IDENFR j
ASSIGN =
IDENFR const_int_4
SEMICN ;
IDENFR c
ASSIGN =
CHARCON A
SEMICN ;
IDENFR d
ASSIGN =
CHARCON Z
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR func_ret_int_1
LPARENT (
IDENFR i
COMMA ,
IDENFR j
COMMA ,
IDENFR c
COMMA ,
IDENFR d
RPARENT )
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR testRecursion
LPARENT (
RPARENT )
LBRACE {
IDENFR hanoi
LPARENT (
LPARENT (
IDENFR Fibonacci
LPARENT (
IDENFR fac
LPARENT (
INTCON 2
RPARENT )
MULT *
IDENFR fac
LPARENT (
INTCON 3
RPARENT )
RPARENT )
MINU -
IDENFR fac
LPARENT (
IDENFR Fibonacci
LPARENT (
INTCON 3
RPARENT )
PLUS +
IDENFR Fibonacci
LPARENT (
INTCON 4
RPARENT )
RPARENT )
RPARENT )
DIV /
IDENFR fac
LPARENT (
IDENFR Fibonacci
LPARENT (
INTCON 2
RPARENT )
PLUS +
IDENFR Fibonacci
LPARENT (
INTCON 3
RPARENT )
RPARENT )
COMMA ,
CHARCON a
COMMA ,
CHARCON b
COMMA ,
CHARCON c
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON ************************************************
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON Start testing recursion:
RPARENT )
SEMICN ;
IDENFR testRecursion
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON ************************************************
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON Start testing global:
RPARENT )
SEMICN ;
IDENFR testGlobal
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON ************************************************
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON Start testing return:
RPARENT )
SEMICN ;
IDENFR testReturn
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON ************************************************
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON Start testing I/O:
RPARENT )
SEMICN ;
IDENFR testIO
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON ************************************************
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON Start testing assign & exp:
RPARENT )
SEMICN ;
IDENFR testAssignAndExp
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON ************************************************
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON Start testing if & while:
RPARENT )
SEMICN ;
IDENFR testIfWhile
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON ************************************************
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON Start testing switch:
RPARENT )
SEMICN ;
IDENFR testSwitch
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON ************************************************
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON Start testing parameter:
RPARENT )
SEMICN ;
IDENFR testPara
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON ************************************************
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
