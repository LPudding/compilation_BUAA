INTTK int
IDENFR arr
LBRACK [
INTCON 1000
RBRACK ]
COMMA ,
IDENFR tmp
LBRACK [
INTCON 1000
RBRACK ]
SEMICN ;
VOIDTK void
IDENFR merge
LPARENT (
INTTK int
IDENFR s1
COMMA ,
INTTK int
IDENFR l1
COMMA ,
INTTK int
IDENFR s2
COMMA ,
INTTK int
IDENFR l2
RPARENT )
LBRACE {
INTTK int
IDENFR i
COMMA ,
IDENFR j
COMMA ,
IDENFR k
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
IDENFR k
ASSIGN =
IDENFR s1
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR l1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR j
LSS <
IDENFR l2
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR arr
LBRACK [
IDENFR s1
PLUS +
IDENFR i
RBRACK ]
GRE >
IDENFR arr
LBRACK [
IDENFR s2
PLUS +
IDENFR j
RBRACK ]
RPARENT )
LBRACE {
IDENFR tmp
LBRACK [
IDENFR k
RBRACK ]
ASSIGN =
IDENFR arr
LBRACK [
IDENFR s2
PLUS +
IDENFR j
RBRACK ]
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR tmp
LBRACK [
IDENFR k
RBRACK ]
ASSIGN =
IDENFR arr
LBRACK [
IDENFR s1
PLUS +
IDENFR i
RBRACK ]
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR k
ASSIGN =
IDENFR k
PLUS +
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR l1
RPARENT )
LBRACE {
IDENFR tmp
LBRACK [
IDENFR k
RBRACK ]
ASSIGN =
IDENFR arr
LBRACK [
IDENFR s1
PLUS +
IDENFR i
RBRACK ]
SEMICN ;
IDENFR k
ASSIGN =
IDENFR k
PLUS +
INTCON 1
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
RBRACE }
WHILETK while
LPARENT (
IDENFR j
LSS <
IDENFR l2
RPARENT )
LBRACE {
IDENFR tmp
LBRACK [
IDENFR k
RBRACK ]
ASSIGN =
IDENFR arr
LBRACK [
IDENFR s2
PLUS +
IDENFR j
RBRACK ]
SEMICN ;
IDENFR k
ASSIGN =
IDENFR k
PLUS +
INTCON 1
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
IDENFR s1
SEMICN ;
IDENFR i
LSS <
IDENFR k
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
IDENFR arr
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR tmp
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
RBRACE }
VOIDTK void
IDENFR inner_merge_sort
LPARENT (
INTTK int
IDENFR start
COMMA ,
INTTK int
IDENFR length
RPARENT )
LBRACE {
INTTK int
IDENFR tmp
COMMA ,
IDENFR mid
SEMICN ;
IFTK if
LPARENT (
IDENFR length
LEQ <=
INTCON 1
RPARENT )
RETURNTK return
SEMICN ;
IFTK if
LPARENT (
IDENFR length
EQL ==
INTCON 2
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR arr
LBRACK [
IDENFR start
RBRACK ]
GRE >
IDENFR arr
LBRACK [
IDENFR start
PLUS +
INTCON 1
RBRACK ]
RPARENT )
LBRACE {
IDENFR tmp
ASSIGN =
IDENFR arr
LBRACK [
IDENFR start
RBRACK ]
SEMICN ;
IDENFR arr
LBRACK [
IDENFR start
RBRACK ]
ASSIGN =
IDENFR arr
LBRACK [
IDENFR start
PLUS +
INTCON 1
RBRACK ]
SEMICN ;
IDENFR arr
LBRACK [
IDENFR start
PLUS +
INTCON 1
RBRACK ]
ASSIGN =
IDENFR tmp
SEMICN ;
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
IDENFR mid
ASSIGN =
IDENFR length
DIV /
INTCON 2
SEMICN ;
IDENFR inner_merge_sort
LPARENT (
IDENFR start
COMMA ,
IDENFR mid
RPARENT )
SEMICN ;
IDENFR inner_merge_sort
LPARENT (
IDENFR start
PLUS +
IDENFR mid
COMMA ,
IDENFR length
MINU -
IDENFR mid
RPARENT )
SEMICN ;
IDENFR merge
LPARENT (
IDENFR start
COMMA ,
IDENFR mid
COMMA ,
IDENFR start
PLUS +
IDENFR mid
COMMA ,
IDENFR length
MINU -
IDENFR mid
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR n
COMMA ,
IDENFR i
COMMA ,
IDENFR a
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON 17373248
RPARENT )
SEMICN ;
SCANFTK scanf
LPARENT (
IDENFR n
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR n
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
SCANFTK scanf
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
IDENFR arr
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR a
SEMICN ;
RBRACE }
IDENFR inner_merge_sort
LPARENT (
INTCON 0
COMMA ,
IDENFR n
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR n
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
PRINTFTK printf
LPARENT (
IDENFR arr
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
